Documentação

http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/toc.html

Doctrine 2.2.2

http://www.doctrine-project.org/downloads/DoctrineORM-2.2.2-full.tar.gz

CodeIgniter 2.1.2

http://codeigniter.com/download.php

Código para .htaccess

RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ index.php/$1 [L]

\application\config\config.php Linha 29

$config['index_page'] = 'index.php'; => $config['index_page'] = '';

\application\config\autoload.php

Linha 40: $autoload['packages'] = array(APPPATH.'third_party/DoctrineORM-2.2.2');
Linha 55: $autoload['libraries'] = array('database', 'Doctrine');
Linha 67: $autoload['helper'] = array('url');

Testando o CodeIgniter: http://localhost/doctrine/

Referência: http://www.joelverhagen.com/blog/2011/05/setting-up-codeigniter-2-with-doctrine-2-the-right-way/

php doctrine orm:schema-tool:create

php doctrine orm:convert-mapping --force --from-database annotation ./EXPORT/
php doctrine orm:generate-entities ./EXPORT/ --generate-annotations=true
php doctrine orm:generate-entities --generate-annotations="true" models/Entities

/*gera o mapeamento dos metadados*/
php doctrine orm:convert-mapping xml ./EXPORT/ --from-database --force


php doctrine orm:mapping:import annotation


/* // fetch metadata
        $driver = new \Doctrine\ORM\Mapping\Driver\DatabaseDriver(
            $this->em->getConnection()->getSchemaManager()
        );

        $this->em->getConfiguration()->setMetadataDriverImpl($driver);
        $cmf = new \Doctrine\ORM\Tools\DisconnectedClassMetadataFactory();
        $cmf->setEntityManager($this->em);

        $classes = $driver->getAllClassNames();

        $metadata = array();
        foreach ($classes as &$class) {
            $metadata[] = $cmf->getMetadataFor($class);
        }

        //Cria as entidades através do Metadata Driver Impl setado
        $generator = new EntityGenerator();
        $generator->setRegenerateEntityIfExists(true);
        $generator->setGenerateStubMethods(true);
        $generator->setGenerateAnnotations(true);
        $generator->generate($metadata, 'application\models\Entities');

        //Cria as classes Repository
        foreach ($classes as &$classe) {
            $repository = new EntityRepositoryGenerator();
            $repository->writeEntityRepositoryClass('Repository\\' . $classe, 'application\models');
        }

        //Carrega todas as entities criadas
        $dir = glob('application\models\Entities/*.php');
        foreach($dir as &$classFilename) {
            require_once $classFilename;
        }

        //Gera as classes Proxies
        $mt = $this->em->getMetadataFactory();
        $this->em->getProxyFactory()->generateProxyClasses($mt->getAllMetadata());*/